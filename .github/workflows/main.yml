name: Build and deploy Aseprite

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      run_fetch:
        description: 'Run fetch-aseprite-info job?'
        required: false
        default: 'true'
      run_create:
        description: 'Run create-release job?'
        required: false
        default: 'true'
      run_build:
        description: 'Run build-aseprite job?'
        required: false
        default: 'true'

env:
  BUILD_TYPE: Release

jobs:
  fetch-aseprite-info:
    name: Fetch deps info
    if: >
      github.event_name != 'workflow_dispatch'
      || github.event.inputs.run_fetch == 'true'
    runs-on: ubuntu-latest
    outputs:
      download-link: ${{ steps.aseprite-link.outputs.download-link }}
      release-tag:    ${{ steps.aseprite-link.outputs.release-tag }}
    steps:
      - name: Fetch Aseprite release link
        id: aseprite-link
        uses: a1393323447/fetch-release@main
        with:
          group: aseprite
          repo: aseprite
          match: Aseprite-.*?-Source.zip

  create-release:
    name: Create Release
    needs: fetch-aseprite-info
    if: >
      needs.fetch-aseprite-info.result == 'success'
      && (github.event_name != 'workflow_dispatch'
          || github.event.inputs.run_create == 'true')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      download-link: ${{ needs.fetch-aseprite-info.outputs.download-link }}
      release-tag:    ${{ needs.fetch-aseprite-info.outputs.release-tag }}
    steps:
      - uses: actions/checkout@v2
      - uses: ncipollo/release-action@v1
        with:
          tag:     ${{ needs.fetch-aseprite-info.outputs.release-tag }}
          body:    Aseprite-${{ needs.fetch-aseprite-info.outputs.release-tag }}
          skipIfReleaseExists: true
          token:   ${{ secrets.GITHUB_TOKEN }}

  build-aseprite:
    name: Build Aseprite
    needs: create-release
    if: >
      needs.create-release.result == 'success'
      && (github.event_name != 'workflow_dispatch'
          || github.event.inputs.run_build == 'true')
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
      fail-fast: false
    steps:
      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
            libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev \
            fuse libfuse2

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install ninja p7zip

      - name: Install Inno Setup (Windows)
        if: runner.os == 'Windows'
        run: choco install innosetup -y

      - uses: actions/checkout@v4

      - name: Install Aseprite
        shell: bash
        run: |
          git clone --recurse-submodules -j8 \
            https://github.com/aseprite/aseprite \
            --branch ${{ needs.create-release.outputs.release-tag }} aseprite

      - name: Install Skia
        working-directory: aseprite
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            choco install wget -y --no-progress
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip
            unzip Skia-Windows-Release-x64.zip -d skia
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-macOS-Release-arm64.zip
            unzip Skia-macOS-Release-arm64.zip -d skia
          else
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Linux-Release-x64.zip
            unzip Skia-Linux-Release-x64.zip -d skia
          fi

      - uses: aseprite/get-ninja@main

      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - name: Generating Makefiles
        shell: bash
        working-directory: aseprite
        run: |
          enable_ccache=off
          laf_backend=skia
          enable_scripting=on

          if [[ "${{ runner.os }}" == "macOS" ]]; then
            skia_arch=arm64
          else
            skia_arch=x64
          fi

          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
            -DENABLE_TESTS=OFF \
            -DENABLE_SCRIPTING=$enable_scripting \
            -DENABLE_CCACHE=$enable_ccache \
            -DLAF_BACKEND=$laf_backend \
            -DSKIA_DIR=$(realpath skia) \
            -DSKIA_LIBRARY_DIR=$(realpath skia/out/Release-$skia_arch)

      - name: Compiling
        shell: bash
        working-directory: aseprite
        run: ninja -C build

      # *** BƯỚC CẬP NHẬT: TÌM KIẾM VÀ SAO CHÉP DLLs ***
      - name: Find and Copy OpenSSL DLLs (Windows)
        if: runner.os == 'Windows'
        working-directory: aseprite/build/bin
        run: |
          Get-ChildItem -Path "C:\\" -Recurse -Filter "libcrypto-1_1-x64.dll" -ErrorAction SilentlyContinue | Select-Object -First 1 | Copy-Item -Destination .
          Get-ChildItem -Path "C:\\" -Recurse -Filter "libssl-1_1-x64.dll" -ErrorAction SilentlyContinue | Select-Object -First 1 | Copy-Item -Destination .
        shell: powershell

      - name: Clean Up Build folder
        if: runner.os == 'macOS'
        shell: bash
        working-directory: aseprite/build/bin
        run: find . -mindepth 1 ! \( -name 'aseprite' -o -name 'data' -prune \) -exec rm -rf {} +

      - name: Make portable zip
        if: runner.os == 'macOS'
        working-directory: aseprite/build/bin
        run: 7z a -tzip Aseprite-${{ needs.create-release.outputs.release-tag }}-${{ runner.os }}.zip *

      - name: Create Inno Setup script (Windows)
        if: runner.os == 'Windows'
        working-directory: aseprite/build/bin
        shell: bash
        run: |
          cat > aseprite.iss <<EOL
          [Setup]
          AppName=Aseprite
          AppVersion=${{ needs.create-release.outputs.release-tag }}
          AppPublisher=Aseprite
          DefaultDirName={autopf}\\Aseprite
          DefaultGroupName=Aseprite
          OutputDir=.
          OutputBaseFilename=Aseprite-${{ needs.create-release.outputs.release-tag }}-setup
          Compression=lzma
          SolidCompression=yes

          [Files]
          Source: "*"; DestDir: "{app}"; Flags: recursesubdirs createallsubdirs

          [Icons]
          Name: "{group}\\Aseprite"; Filename: "{app}\\aseprite.exe"
          Name: "{commondesktop}\\Aseprite"; Filename: "{app}\\aseprite.exe"
          EOL

      - name: Compile Inno Setup installer (Windows)
        if: runner.os == 'Windows'
        working-directory: aseprite/build/bin
        run: '& "C:\Program Files (x86)\Inno Setup 6\iscc.exe" aseprite.iss'
        shell: powershell

      - name: Create AppImage (Linux)
        if: runner.os == 'Linux'
        working-directory: aseprite/build/bin
        run: |
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          mkdir -p AppDir/usr/bin
          cp -r data AppDir/usr/bin
          cp aseprite AppDir/usr/bin
          cat > AppDir/aseprite.desktop <<EOL
          [Desktop Entry]
          Name=Aseprite
          Exec=aseprite
          Icon=aseprite
          Type=Application
          Categories=Graphics;
          EOL
          wget -O AppDir/aseprite.png https://raw.githubusercontent.com/aseprite/aseprite/refs/heads/main/data/icons/ase128.png
          chmod +x AppDir/aseprite.png
          cat > AppDir/AppRun <<EOL
          #!/bin/sh
          cd "\$(dirname "\$0")/usr/bin"
          ./aseprite "\$@"
          EOL
          chmod +x AppDir/AppRun
          ./appimagetool AppDir Aseprite-${{ needs.create-release.outputs.release-tag }}-x86_64.AppImage

      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: |
            ${{ runner.os == 'Linux' && format('aseprite/build/bin/Aseprite-{0}-x86_64.AppImage', needs.create-release.outputs.release-tag) || '' }}
            ${{ runner.os == 'macOS' && format('aseprite/build/bin/Aseprite-{0}-{1}.zip', needs.create-release.outputs.release-tag, runner.os) || '' }}
            ${{ runner.os == 'Windows' && format('aseprite/build/bin/Aseprite-{0}-setup.exe', needs.create-release.outputs.release-tag) || '' }}
          asset_name: |
            ${{ runner.os == 'Linux' && format('Aseprite-{0}-x86_64.AppImage', needs.create-release.outputs.release-tag) || '' }}
            ${{ runner.os == 'macOS' && format('Aseprite-{0}-{1}.zip', needs.create-release.outputs.release-tag, runner.os) || '' }}
            ${{ runner.os == 'Windows' && format('Aseprite-{0}-Windows-setup.exe', needs.create-release.outputs.release-tag) || '' }}
          tag:        ${{ needs.create-release.outputs.release-tag }}
